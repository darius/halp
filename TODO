instead of '... done', indicate if there were any changes
(so we don't have to have a cleanly-saved state at the beginning
in order to tell)

get v8halp to handle & report errors from loading the file
(not just from running each /// line)

v8halp: prettyprint objects (not just [object Object])

When you have:
def foo():
  print 'yay'
  assert False
## foo()
There's no 'yay' before the error traceback.

may be useful:
  inspect.currentframe()/getouterframes()/getinnerframes()/getframeinfo()

clean up code:
  halp.el has some ugly bits still lying around
  group stuff into an examples directory

set the current directory for python

fix: in pyhalp if the program writes to stdout, successful M-i presses
add an extra newline in front of the output each time 

fix: ghcihalp.py isn't reporting errors (or anything else) on this input:
myzip [] [] = []
myzip (x:xs) (x:ys) = (x, y) : (myzip xs ys)
--- myzip "hello" "world"

fix: in pyhalp any stdout output isn't shown if there's an exception

set PYTHONPATH (or something)

don't delete old outputs if there's an error in the initial module
loading. but do mark them somehow as no longer the current output.

add doc comments to interactive elisp functions

We're still getting 'File "<string>", line 14' on syntax errors.
It looks like that message comes out of the SyntaxError exception
rather than the traceback. I tried setting value.filename = halp_filename
in get_lineno, but that did nothing. Come back to this.

tush variant

continuous halp mode: auto-rerun halp after every change to the buffer;
but don't show changed output after these auto-reruns (too disruptive);
instead just change the prefixes on outputs that change (to '#X ', say).

move cursor to position reported by compiler error message

use sys.meta_path:
http://www.python.org/dev/peps/pep-0302/
http://blog.dowski.com/2008/07/31/customizing-the-python-import-system/

more concise/useful Python error messages

doctest support -- mark an output as 'correct', and tell me when
there's an error

single-stepping of some sort

test isolation

allow multiline examples (and outputs?)

syntax coloring

support "literate python"? noweb?

for Haskell, handle compiler error messages for example lines

rewrite in elisp?

insert results asynchronously; don't hang up emacs

lisp support

persistent process to avoid startup time, if possible

make sure python isn't compiling pyhalp.py every time we run
